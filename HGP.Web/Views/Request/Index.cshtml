@model HGP.Web.Models.Requests.RequestIndexModel
@{
    ViewBag.Title = "Requests";
    ViewBag.MainClass = "content_full_width";
    Layout = "~/Views/Shared/_PortalLayout.cshtml";
}
<!-- Manager Modal -->
<style>
    .modal .modal-dialog {
        width: 450px;
    }
</style>
<div class="modal fade" id="myManagerInfoModal" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h1 class="modal-title">
                    <i class="icon-warning-sign"></i> Manager's Information
                </h1>
                <h5>Enter the contact information for the person responsible for approving this request.</h5>
            </div>
            <div class="modal-body no-padding">
                @using (Html.BeginForm(string.Empty, string.Empty, FormMethod.Post, new { @class = "smart-form", role = "form" }))
                {
                <fieldset>
                    <div class="row">
                        <section class="col col-8 form-group">
                            <label class="input">
                                @Html.TextBox("Name", "", new { @placeholder = "Name" })
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-8 form-group">
                            <label class="input">
                                @Html.TextBox("EmailAddress", "", new { @placeholder = "Email" })
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-8 form-group">
                            <label class="input">
                                @Html.TextBox("Phone", "", new { @placeholder = "Phone" })
                            </label>
                        </section>
                    </div>
                </fieldset>

                <footer>
                    <div id="managerErrorMsg" class="error" style="color:red; display: none;">Please select someone other than yourself.</div>
                    <div id="badEmailErrorMsg" class="error" style="color:red; display: none;">Please enter a valid email address.</div>
                    
                    <button id="managerInfoBtn" type="button" class="btn btn-primary">
                        Save
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">
                        Cancel
                    </button>
                </footer>
                }

            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>

<style>
    .modal .modal-dialog {
        width: 550px;
    }
</style>
<!-- Address Modal -->
<div class="modal fade" id="myEditAddressModal" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h1 class="modal-title">
                    <i class="icon-warning-sign"></i> Ship to Address
                </h1>
                <h5>Enter your address information and click Place Request to submit the request. </h5>
            </div>
            <div class="modal-body no-padding">
                @using (Html.BeginRouteForm("PortalRoute", new { controller = "Request", portalTag = Model.SiteSettings.PortalTag, action = "EditShipTo" },
                FormMethod.Post, new { id = "editAddressForm", @class = "smart-form", role = "form", novalidate = "novalidate" }))
                {


                            <div class="form-group">
                                @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                            </div>


                @Html.HiddenFor(x => x.Request.Id)
                @Html.HiddenFor(x => x.Request.RequestorId)

                <fieldset>

                    <div class="row">
                        <section class="form-group col col-8">
                            <label class="input">
                                @Html.TextBoxFor(m => m.Request.ShipToAddress.Attention, new { @placeholder = "Attention" })
                            </label>
                        </section>

                        <section class="form-group col col-8">
                            <label for="Street1" class="input">
                                @Html.TextBoxFor(m => m.Request.ShipToAddress.Street1, new { @placeholder = "Street *" })
                            </label>
                        </section>

                        <section class="form-group col col-8">
                            <label for="Street2" class="input">
                                @Html.TextBoxFor(m => m.Request.ShipToAddress.Street2, new { @placeholder = "Street" })
                            </label>
                        </section>
                    </div>

                    <div class="row">
                        <section class="col col-5 form-group">
                            <label class="input">
                                @Html.TextBoxFor(m => m.Request.ShipToAddress.City, new { @placeholder = "City * " })
                            </label>
                        </section>

                        <section class="col col-1 form-group">
                            <label class="input">
                                @Html.TextBoxFor(m => m.Request.ShipToAddress.State, new { @placeholder = "State *" })
                            </label>
                        </section>
                    </div>

                    <div class="row">
                        <section class="col col-1 form-group">
                            <label class="input">
                                @Html.TextBoxFor(m => m.Request.ShipToAddress.Zip, new { @placeholder = "Zip code *" })
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-5 form-group">
                            <label class="select">
                                <select name="country">
                                    <option value="0" selected="" disabled="">Country</option>
                                    <option value="244">Aaland Islands</option>
                                    <option value="1">Afghanistan</option>
                                    <option value="2">Albania</option>
                                    <option value="3">Algeria</option>
                                    <option value="4">American Samoa</option>
                                    <option value="5">Andorra</option>
                                    <option value="6">Angola</option>
                                    <option value="7">Anguilla</option>
                                    <option value="8">Antarctica</option>
                                    <option value="9">Antigua and Barbuda</option>
                                    <option value="10">Argentina</option>
                                    <option value="11">Armenia</option>
                                    <option value="12">Aruba</option>
                                    <option value="13">Australia</option>
                                    <option value="14">Austria</option>
                                    <option value="15">Azerbaijan</option>
                                    <option value="16">Bahamas</option>
                                    <option value="17">Bahrain</option>
                                    <option value="18">Bangladesh</option>
                                    <option value="19">Barbados</option>
                                    <option value="20">Belarus</option>
                                    <option value="21">Belgium</option>
                                    <option value="22">Belize</option>
                                    <option value="23">Benin</option>
                                    <option value="24">Bermuda</option>
                                    <option value="25">Bhutan</option>
                                    <option value="26">Bolivia</option>
                                    <option value="27">Bosnia and Herzegovina</option>
                                    <option value="28">Botswana</option>
                                    <option value="29">Bouvet Island</option>
                                    <option value="30">Brazil</option>
                                    <option value="31">British Indian Ocean Territory</option>
                                    <option value="32">Brunei Darussalam</option>
                                    <option value="33">Bulgaria</option>
                                    <option value="34">Burkina Faso</option>
                                    <option value="35">Burundi</option>
                                    <option value="36">Cambodia</option>
                                    <option value="37">Cameroon</option>
                                    <option value="38">Canada</option>
                                    <option value="251">Canary Islands</option>
                                    <option value="39">Cape Verde</option>
                                    <option value="40">Cayman Islands</option>
                                    <option value="41">Central African Republic</option>
                                    <option value="42">Chad</option>
                                    <option value="43">Chile</option>
                                    <option value="44">China</option>
                                    <option value="45">Christmas Island</option>
                                    <option value="46">Cocos (Keeling) Islands</option>
                                    <option value="47">Colombia</option>
                                    <option value="48">Comoros</option>
                                    <option value="49">Congo</option>
                                    <option value="50">Cook Islands</option>
                                    <option value="51">Costa Rica</option>
                                    <option value="52">Cote D'Ivoire</option>
                                    <option value="53">Croatia</option>
                                    <option value="54">Cuba</option>
                                    <option value="246">Curacao</option>
                                    <option value="55">Cyprus</option>
                                    <option value="56">Czech Republic</option>
                                    <option value="237">Democratic Republic of Congo</option>
                                    <option value="57">Denmark</option>
                                    <option value="58">Djibouti</option>
                                    <option value="59">Dominica</option>
                                    <option value="60">Dominican Republic</option>
                                    <option value="61">East Timor</option>
                                    <option value="62">Ecuador</option>
                                    <option value="63">Egypt</option>
                                    <option value="64">El Salvador</option>
                                    <option value="65">Equatorial Guinea</option>
                                    <option value="66">Eritrea</option>
                                    <option value="67">Estonia</option>
                                    <option value="68">Ethiopia</option>
                                    <option value="69">Falkland Islands (Malvinas)</option>
                                    <option value="70">Faroe Islands</option>
                                    <option value="71">Fiji</option>
                                    <option value="72">Finland</option>
                                    <option value="74">France, skypolitan</option>
                                    <option value="75">French Guiana</option>
                                    <option value="76">French Polynesia</option>
                                    <option value="77">French Southern Territories</option>
                                    <option value="126">FYROM</option>
                                    <option value="78">Gabon</option>
                                    <option value="79">Gambia</option>
                                    <option value="80">Georgia</option>
                                    <option value="81">Germany</option>
                                    <option value="82">Ghana</option>
                                    <option value="83">Gibraltar</option>
                                    <option value="84">Greece</option>
                                    <option value="85">Greenland</option>
                                    <option value="86">Grenada</option>
                                    <option value="87">Guadeloupe</option>
                                    <option value="88">Guam</option>
                                    <option value="89">Guatemala</option>
                                    <option value="241">Guernsey</option>
                                    <option value="90">Guinea</option>
                                    <option value="91">Guinea-Bissau</option>
                                    <option value="92">Guyana</option>
                                    <option value="93">Haiti</option>
                                    <option value="94">Heard and Mc Donald Islands</option>
                                    <option value="95">Honduras</option>
                                    <option value="96">Hong Kong</option>
                                    <option value="97">Hungary</option>
                                    <option value="98">Iceland</option>
                                    <option value="99">India</option>
                                    <option value="100">Indonesia</option>
                                    <option value="102">Iraq</option>
                                    <option value="103">Ireland</option>
                                    <option value="104">Israel</option>
                                    <option value="105">Italy</option>
                                    <option value="106">Jamaica</option>
                                    <option value="107">Japan</option>
                                    <option value="240">Jersey</option>
                                    <option value="108">Jordan</option>
                                    <option value="109">Kazakhstan</option>
                                    <option value="110">Kenya</option>
                                    <option value="111">Kiribati</option>
                                    <option value="113">Korea, Republic of</option>
                                    <option value="114">Kuwait</option>
                                    <option value="115">Kyrgyzstan</option>
                                    <option value="117">Latvia</option>
                                    <option value="118">Lebanon</option>
                                    <option value="119">Lesotho</option>
                                    <option value="120">Liberia</option>
                                    <option value="121">Libyan Arab Jamahiriya</option>
                                    <option value="122">Liechtenstein</option>
                                    <option value="123">Lithuania</option>
                                    <option value="124">Luxembourg</option>
                                    <option value="125">Macau</option>
                                    <option value="127">Madagascar</option>
                                    <option value="128">Malawi</option>
                                    <option value="129">Malaysia</option>
                                    <option value="130">Maldives</option>
                                    <option value="131">Mali</option>
                                    <option value="132">Malta</option>
                                    <option value="133">Marshall Islands</option>
                                    <option value="134">Martinique</option>
                                    <option value="135">Mauritania</option>
                                    <option value="136">Mauritius</option>
                                    <option value="137">Mayotte</option>
                                    <option value="138">Mexico</option>
                                    <option value="140">Moldova, Republic of</option>
                                    <option value="141">Monaco</option>
                                    <option value="142">Mongolia</option>
                                    <option value="242">Montenegro</option>
                                    <option value="143">Montserrat</option>
                                    <option value="144">Morocco</option>
                                    <option value="145">Mozambique</option>
                                    <option value="146">Myanmar</option>
                                    <option value="147">Namibia</option>
                                    <option value="148">Nauru</option>
                                    <option value="149">Nepal</option>
                                    <option value="150">Netherlands</option>
                                    <option value="151">Netherlands Antilles</option>
                                    <option value="152">New Caledonia</option>
                                    <option value="153">New Zealand</option>
                                    <option value="154">Nicaragua</option>
                                    <option value="155">Niger</option>
                                    <option value="156">Nigeria</option>
                                    <option value="157">Niue</option>
                                    <option value="158">Norfolk Island</option>
                                    <option value="112">North Korea</option>
                                    <option value="159">Northern Mariana Islands</option>
                                    <option value="160">Norway</option>
                                    <option value="161">Oman</option>
                                    <option value="162">Pakistan</option>
                                    <option value="163">Palau</option>
                                    <option value="164">Panama</option>
                                    <option value="165">Papua New Guinea</option>
                                    <option value="166">Paraguay</option>
                                    <option value="167">Peru</option>
                                    <option value="168">Philippines</option>
                                    <option value="169">Pitcairn</option>
                                    <option value="170">Poland</option>
                                    <option value="171">Portugal</option>
                                    <option value="172">Puerto Rico</option>
                                    <option value="173">Qatar</option>
                                    <option value="174">Reunion</option>
                                    <option value="175">Romania</option>
                                    <option value="176">Russian Federation</option>
                                    <option value="177">Rwanda</option>
                                    <option value="178">Saint Kitts and Nevis</option>
                                    <option value="179">Saint Lucia</option>
                                    <option value="181">Samoa</option>
                                    <option value="182">San Marino</option>
                                    <option value="183">Sao Tome and Principe</option>
                                    <option value="184">Saudi Arabia</option>
                                    <option value="185">Senegal</option>
                                    <option value="243">Serbia</option>
                                    <option value="186">Seychelles</option>
                                    <option value="187">Sierra Leone</option>
                                    <option value="188">Singapore</option>
                                    <option value="189">Slovak Republic</option>
                                    <option value="190">Slovenia</option>
                                    <option value="191">Solomon Islands</option>
                                    <option value="192">Somalia</option>
                                    <option value="193">South Africa</option>
                                    <option value="248">South Sudan</option>
                                    <option value="195">Spain</option>
                                    <option value="196">Sri Lanka</option>
                                    <option value="249">St. Barthelemy</option>
                                    <option value="197">St. Helena</option>
                                    <option value="250">St. Martin (French part)</option>
                                    <option value="198">St. Pierre and Miquelon</option>
                                    <option value="199">Sudan</option>
                                    <option value="200">Suriname</option>
                                    <option value="201">Svalbard and Jan Mayen Islands</option>
                                    <option value="202">Swaziland</option>
                                    <option value="203">Sweden</option>
                                    <option value="204">Switzerland</option>
                                    <option value="205">Syrian Arab Republic</option>
                                    <option value="206">Taiwan</option>
                                    <option value="207">Tajikistan</option>
                                    <option value="208">Tanzania, United Republic of</option>
                                    <option value="209">Thailand</option>
                                    <option value="210">Togo</option>
                                    <option value="211">Tokelau</option>
                                    <option value="212">Tonga</option>
                                    <option value="213">Trinidad and Tobago</option>
                                    <option value="214">Tunisia</option>
                                    <option value="215">Turkey</option>
                                    <option value="216">Turkmenistan</option>
                                    <option value="217">Turks and Caicos Islands</option>
                                    <option value="218">Tuvalu</option>
                                    <option value="219">Uganda</option>
                                    <option value="220">Ukraine</option>
                                    <option value="221">United Arab Emirates</option>
                                    <option value="222">United Kingdom</option>
                                    <option value="223">United States</option>
                                    <option value="224">United States Minor Outlying Islands</option>
                                    <option value="225">Uruguay</option>
                                    <option value="226">Uzbekistan</option>
                                    <option value="227">Vanuatu</option>
                                    <option value="228">Vatican City State (Holy See)</option>
                                    <option value="229">Venezuela</option>
                                    <option value="230">Viet Nam</option>
                                    <option value="231">Virgin Islands (British)</option>
                                    <option value="232">Virgin Islands (U.S.)</option>
                                    <option value="233">Wallis and Futuna Islands</option>
                                    <option value="234">Western Sahara</option>
                                    <option value="235">Yemen</option>
                                    <option value="238">Zambia</option>
                                    <option value="239">Zimbabwe</option>
                                </select> <i></i>
                            </label>
                        </section>
                    </div>
                    
                        * Required

                    </fieldset>

                <footer>
                    <button id="managerInfoBtn" type="submit" class="btn btn-primary">
                        Save
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">
                        Cancel
                    </button>
                </footer>
                }

            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>

@if (!string.IsNullOrEmpty(Model.HeaderModel.ReferringPage) && (Model.HeaderModel.ReferringPage.Contains("list?")))
{
    <p><a href="@Model.HeaderModel.ReferringPage"><i class="fa fa-long-arrow-left"></i> Back to list</a></p>
}
<section id="widget-grid" class="">
    <div class="row">
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <div class="jarviswidget well">
                <header>
                    <h2><strong>Requests</strong></h2>
                </header>
                <div role="content">
                    <!-- widget content -->
                    <div class="widget-body no-padding">
                        @using (Html.BeginRouteForm("PortalRoute", new { controller = "Request", portalTag = Model.HeaderModel.PortalTag, action = "Process" },
                                FormMethod.Post, new { id = "requestform", @class = "", role = "form", novalidate = "novalidate" }))
                        {
                            @Html.ValidationSummary("", new { @class = "text-danger" })
                            @Html.HiddenFor(x => x.Request.Id)
                            @Html.HiddenFor(x => x.Request.ApprovingManagerEmail)
                            @Html.HiddenFor(x => x.Request.ApprovingManagerName)
                            @Html.HiddenFor(x => x.Request.ApprovingManagerId)
                            @Html.HiddenFor(x => x.Request.ApprovingManagerPhone)

                            <div class="padding-10">
                                <div class="pull-left">
                                    <img src="/Content/img/logo-small.png" width="110" height="23" alt="invoice icon">
                                </div>
                                <div class="pull-right">
                                    <h1 class="font-400">request</h1>
                                </div>
                                <div class="clearfix"></div>
                                <div class="row">
                                    <div class="col-sm-8">
                                        <div>
                                            <h4 class="font-md pull-left padding-right-10">ship to:</h4>
                                            <button id="editShipToBtn" type="button" class="btn btn-success">
                                                <i class="fa fa-pencil"></i> Change ship to address
                                            </button>
                                        </div>
                                        <div class="clearfix"></div>
                                        <address>
                                            @Model.SiteSettings.CompanyName<br />
                                            @if (!string.IsNullOrWhiteSpace(Model.Request.ShipToAddress.Attention))
                                            {
                                            @Model.Request.ShipToAddress.Attention
                                            <br />
                                            }
                                            @Model.Request.ShipToAddress.Street1
                                            <br />
                                            @Model.Request.ShipToAddress.City, @Model.Request.ShipToAddress.State @Model.Request.ShipToAddress.Zip
                                            <br />
                                            <abbr title="Phone">P:</abbr> <span class="phone">@Model.Request.RequestorPhone</span>
                                        </address>
                                    </div>
                                    <div class="col-sm-4">
                                        <div>
                                            <div>
                                                <strong>REQUEST NO:</strong>
                                                <span class="pull-right"> @Model.Request.RequestNum </span>
                                            </div>
                                        </div>
                                        <div>
                                            <strong>REQUEST DATE:</strong>
                                            <span class="pull-right"> <i class="fa fa-calendar"></i> @Model.Request.RequestDate.ToShortDateString() </span>
                                        </div>
                                        <br>
                                        <div class="well well-sm  bg-color-grayDark txt-color-white no-border">
                                            <span class="font-md">
                                                Total:
                                            </span>
                                            <span class="pull-right font-md">@MyHelpers.FormatCurrency(Html, @Model.Request.AssetRequests.Sum(x => (decimal.Parse(x.BookValue))).ToString())</span>
                                        </div>
                                        <br>
                                        <br>
                                    </div>
                                </div>
                            </div>
                            <table id="product-grid" class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>ITEM</th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th>NBV</th>
                                    </tr>
                                </thead>
                                <tbody id="list-container">
                                    @foreach (var product in Model.Request.AssetRequests)
                                    {
                                        <tr id="@product.Id">
                                            <td width="100">
                                                @if (product.Media != null & product.Media.Count > 0)
                                                {   <a href='@("/" + Model.SiteSettings.PortalTag + "/asset/index/" + product.HitNumber)'>
                                                    <img src='@("https://s3-us-west-1.amazonaws.com/hgpmedia/" + Model.SiteSettings.PortalTag + "/t/" + product.Media[0].FileName)' />
                                                </a>
                                                }
                                            </td>
                                            <td>
                                                <a href='@("/" + Model.SiteSettings.PortalTag + "/asset/index/" + product.HitNumber)'>@product.Title</a><br />Hit #: @product.HitNumber
                                            </td>


                                            <td>
                                                @{
                                                    bool isMatchedWish = false;
                                                    string firstMatchedWishID = Convert.ToString(Html.Action("SearchForMatchedAsset", new { assetID = product.Id }));
                                                    string matchedText = "Matching wish found";
                                                    if (!(string.IsNullOrEmpty(firstMatchedWishID)))
                                                    {
                                                        isMatchedWish = true;
                                                    }
                                                }


                                                @if (isMatchedWish)
                                                {
                                                    <div>
                                                        @matchedText
                                                        <button id="editShipToBtn" type="button" class="margin-left-10 btn btn-success" onclick="closeWishFn('@firstMatchedWishID' , '@product.Id');">
                                                            <i class="fa fa-pencil"></i> Remove wish
                                                        </button>
                                                    </div>
                                                    
                                                }
                                            </td>



                                            <td>
                                                <a class="btn btn-sm btn-default" onclick="removeReqFromCart('@product.Id');">
                                                    <i class="fa fa-trash" style="font-size:140%"></i>
                                                </a>
                                            </td>
                                            <td class="price">
                                                @if (product.DisplayBookValue)
                                                {
                                                <span>@MyHelpers.FormatCurrency(Html, product.BookValue)</span>
                                                }
                                                else
                                                {
                                                <span>@Model.SiteSettings.BookValueMessage</span>
                                                }
                                            </td>
                                        </tr>
                                                    }
                                </tbody>
                            </table>
                            <div class="invoice-footer">
                                <div class="row">
                                    <div class="col-md-4 pull-left" style="margin-left: 6px;">

                                    </div>
                                    <div class="col-md-7">
                                        <div class="invoice-sum-total pull-right padding-right-10">
                                            <h3><strong>Total: @MyHelpers.FormatCurrency(Html, @Model.Request.AssetRequests.Sum(x => decimal.Parse(x.BookValue)).ToString())</strong></h3>
                                        </div>
                                    </div>
                                </div>

                                @if (!string.IsNullOrWhiteSpace(Model.SiteSettings.RequestPageMessage))
                                {
                                <div class="smart-form row padding-top-10 padding-right-10">
                                    <section class="col col-md-6 form-group pull-left">
                                        <span class="margin-left-5"><strong>Instructions</strong></span>
                                        <label class="input padding-top-5">
                                            @Html.Raw(Model.SiteSettings.RequestPageMessage)
                                        </label>
                                    </section>
                                </div>
                                }


                                <div class="smart-form row padding-top-10">
                                    <section class="col col-md-11 form-group pull-left">
                                        <span class="margin-left-5"><strong>Notes & Comments</strong></span>
                                        <label class="input padding-top-5">
                                            @Html.TextAreaFor(m => m.Request.Notes, 5, 85, new { @placeholder = "" })
                                        </label>
                                    </section>
                                </div>

                                <div class="padding-10 margin-top-20 ">
                                    <button id="placeRequestBtn" type="button" class="btn btn-primary">
                                        <i class="fa fa-plus"></i> Place Request
                                    </button>
                                    <span class="margin-left-10">Approving manager:</span> <span id="approvingManagerLabel">@Model.Request.ApprovingManagerName</span>
                                    @if (Model.SiteSettings.AllowSelfSelectedApprovers)
                                    {
                                    <button data-toggle="modal" href="#myManagerInfoModal" id="editManagerBtn" type="button" class="btn btn-success margin-left-10">
                                        <i class="fa fa-pencil"></i> Change
                                    </button>
                                    }
                                </div>

                                <div class="padding-10 margin-top-20 ">

                                </div>
                            </div>
                                                    }
                    </div>
                </div>
            </div>
        </article>
    </div>
</section>
@section scripts
{
    <script>
        function isEmail(email) {
            var regex = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return regex.test(email);
        }

        $(document).ready(function() {
            $('#managerErrorMsg').hide();
            $('#badEmailErrorMsg').hide();

            $('#editAddressForm').on('submit',
                function(e) {
                    e.preventDefault();
                    var form = $(this);
                    if ($(this).valid()) {

                        $.ajax({
                            url: form.attr('action'),
                            type: "POST",
                            data: form.serialize().replace(new RegExp("Request\\.", "g"), ''),
                            processData: false,
                            success: function(data) {
                                if (data.Success) {
                                    location.reload();
                                } else {
                                    displayErrors(form, data.Errors);
                                }
                            },
                            error: function(jqXhr, textStatus, errorThrown) {
                                alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                            },
                            complete: function() {
                            }
                        });

                    }
                });

            $('#managerInfoBtn').on('click',
                function(e) {
                    $('#managerErrorMsg').hide();
                    $('#badEmailErrorMsg').hide();
                    var managerEmail = $('#EmailAddress').val();
                    var requestorEmail = '@Model.Request.RequestorEmail';
                    if (managerEmail.toLowerCase() == requestorEmail.toLowerCase()) {
                        $('#managerErrorMsg').show();
                        e.preventDefault();
                    } else {
                        if (isEmail(managerEmail)) {
                            $('#myManagerInfoModal').modal('hide');
                            $('#Request_ApprovingManagerName').val($('#Name').val());
                            $('#Request_ApprovingManagerPhone').val($('#Phone').val());
                            $('#Request_ApprovingManagerEmail').val($('#EmailAddress').val());

                            $('#approvingManagerLabel').html($('#Name').val());

                            $('#managerErrorMsg').hide();
                            $('#badEmailErrorMsg').hide();
                        } else {
                            $('#badEmailErrorMsg').show();
                            e.preventDefault();
                        }

                    }
                });


            $("#placeRequestBtn").on("click",
                function() {
                    var False = false;
                    var True = true;
                    if (@Model.Request.IsShipToAddressValid == false) {
                        $('#myEditAddressModal').modal('show');
                    } else {
                        var approver = $('#Request_ApprovingManagerEmail').val();
                        if (approver == '') {
                            $('#myManagerInfoModal').modal('show');
                        } else {
                            $('#requestform').submit();
                        }
                    }
                });

            $("#editShipToBtn").on("click",
                function() {
                    $('#myEditAddressModal').modal('show');
                });

            $('#editAddressForm').on('submit',
                function(e) {
                    e.preventDefault();
                    var form = $(this);
                    if ($(this).valid()) {

                        $.ajax({
                            url: form.attr('action'),
                            type: "POST",
                            data: form.serialize().replace(new RegExp("Request\\.", "g"), ''),
                            processData: false,
                            success: function(data) {
                                if (data.Success) {
                                    location.reload();
                                } else {
                                    displayErrors(form, data.Errors);
                                }
                            },
                            error: function(jqXhr, textStatus, errorThrown) {
                                alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                            },
                            complete: function() {
                            }
                        });

                    }
                });

            function displayErrors(form, errors) {
                var container = form.find("[data-valmsg-summary=true]"),
                    list = container.find("ul");

                if (list && errors.length) {
                    container.addClass("validation-summary-errors")
                        .removeClass("validation-summary-valid");

                    list.empty();
                    $.each(errors,
                        function(index, value) {
                            list.append('<li>' + value + '</li>');
                        });

                    if (window.onValidatorSummaryShown) {
                        window.onValidatorSummaryShown.call(container);
                    }
                }
            }

            $(".phone").html(function(i, DATA) {
                var data = formatPhoneNumber(DATA);
                return data;
            });

            function formatPhoneNumber(s) {
                var s2 = ("" + s).replace(/\D/g, '');
                var m = s2.match(/^(\d{3})(\d{3})(\d{4})$/);
                return (!m) ? null : "(" + m[1] + ") " + m[2] + "-" + m[3];
            }
        });

        function removeReqFromCart(assetRequestId) {
            var action = '@Url.RouteUrl("PortalRoute", new {portaltag = Model.SiteSettings.PortalTag, action = "Remove", controller = "Request"})';
            var jsonData = JSON.stringify({ "assetRequestId": assetRequestId });
            $.ajax({
                url: action,
                type: "POST",
                dataType: "json",
                contentType: "application/json charset=utf-8",
                data: jsonData,
                processData: false,
                success: function(data) {
                    if (data.Success) {
                        location.reload();
                    }
                },
                error: function(jqXhr, textStatus, errorThrown) {
                    alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                },
                complete: function() {
                }
            });
        }

        function closeWishFn(wishListID, assetID) {

            if (wishListID.length > 0) {
                $("#chk_" + assetID).attr('disabled', true);

                var action = '@Url.RouteUrl("PortalRoute", new {action = "CloseWishList", controller = "WishList"})';
                var jsonData = JSON.stringify({ "wishListID": wishListID });

                $.ajax({
                    url: action,
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json charset=utf-8",
                    data: jsonData,
                    processData: false,
                    success: function(data) {
                        if (data.success) {
                            location.reload();
                        }
                    },
                    error: function(jqXhr, textStatus, errorThrown) {
                        alert("Error '" +
                            jqXhr.status +
                            "' (textStatus: '" +
                            textStatus +
                            "', errorThrown: '" +
                            errorThrown +
                            "')");
                    }
                });
            } else {
                alert("An error occur. Please try again later.");
            }
        }


    </script>
}