@model HGP.Web.Models.Admin.AdminUsersHomeModel
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="row margin-bottom-10">
    <div class="col-sm-4">
        <div class="input-group">
            <div class="input-group-btn ">
                @using (Html.BeginRouteForm("AdminPortalRoute", new { controller = "AdminUsers", Action = "CreateAdmin", id = @Model.PortalTag }, FormMethod.Get, new { @class = "form-horizontal", role = "form" }))
                {
                    <button id="addLocationBtn" class="btn btn-success">
                        <i class="fa fa-plus"></i> <span class="hidden-mobile">Add New Administrator</span>
                    </button>
                }
            </div>

        </div>
    </div>
</div>



<!-- widget grid -->
<section id="widget-grid" class="">


    <!-- Widget ID (each widget will need unique ID)-->
    <div class="jarviswidget jarviswidget-color-greenLight" id="wid-id-0" data-widget-colorbutton="false"
         data-widget-editbutton="false"
         data-widget-togglebutton="false"
         data-widget-deletebutton="false">
        <!-- widget options:
            usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

            data-widget-colorbutton="false"
            data-widget-editbutton="false"
            data-widget-togglebutton="false"
            data-widget-deletebutton="false"
            data-widget-fullscreenbutton="false"
            data-widget-custombutton="false"
            data-widget-collapsed="true"
            data-widget-sortable="false"

        -->
        <header>
            <h2><strong>All Administrators</strong></h2>
        </header>


        <!-- widget div-->
        <div>

            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
                <!-- This area used as dropdown edit box -->
                <input class="form-control" type="text">
                <span class="note"><i class="fa fa-check text-success"></i> Change title to update and save instantly!</span>

            </div>

            <!-- widget content -->
            <div class="widget-body no-padding">

                <div class="custom-scroll table-responsive">

                    <table id="users-grid" class="table table-striped table-bordered table-hover" width="100%">
                        <thead>
                            <tr>
                                <th>
                                    Id
                                </th>
                                <th>
                                    Actions
                                </th>
                                <th>
                                    Name
                                </th>
                                <th>
                                    Email
                                </th>
                                <th>
                                    Phone
                                </th>
                                <th>
                                    Roles
                                </th>
                                <th>
                                    Last Login
                                </th>
                            </tr>
                        </thead>

                        <tbody data-bind="template: { name: 'users-tmpl', foreach: myViewModel.model.Users }"></tbody>
                    </table>


                </div>



            </div>
            <!-- end widget content -->

        </div>
        <!-- end widget div -->

    </div>
    <!-- end widget -->

</section>
<!-- end widget grid -->


<script id="users-tmpl" type="text/html">
    <tr>
        <td>
            <span data-bind="text: $index" />
        </td>
        <td></td>
        <td>
            <span data-bind="text: FirstName() + ' '  + LastName()" />
        </td>
        <td>
            <span data-bind="text: Email" />
        </td>
        <td>
            <span data-bind="phone: PhoneNumber" />
        </td>
        <td>
            <span data-bind="text: Roles" />
        </td>
        <td>
            <span data-bind="mongodate: LastLogin, format: 'L LT'" />
        </td>
    </tr>

</script>

@section Scripts
    {
    @Scripts.Render("~/bundles/datatables")

    <script type="text/javascript">
      
        var initialData = @Html.Raw(Model.JsonData);
            var locationsUrl = '@Html.RouteLink("Users", "AdminPortalRoute", new { controller = "adminusers", action = "index" }, new { id = "registerLink" })';

            var viewModel = function() {
                var self = this;
                self.model = ko.mapping.fromJS(initialData);
            };

            var myViewModel = new viewModel();
            ko.applyBindings(myViewModel, $("#users-grid").get(0));
            //ko.applyBindings(myViewModel, $(".breadcrumb .info").get(0));
            $('#users-grid').DataTable({
                "columnDefs": [
                    {
                        // The `data` parameter refers to the data for the cell (defined by the
                        // `data` option, which defaults to the column being worked with, in
                        // this case `data: 0`.
                        "render": function(data, type, row) {
                            var id = $(row[1]).html();
                            var editButton = '<button class="btn btn-xs btn-default" data-original-title="" onclick="editUser(\'' +  viewModel.PortalTag + '\');"><i class="fa fa-eye"></i></button><span> </span>';

                            return editButton;
                        },
                        "targets": 1
                    },
                    { "visible": false, "targets": [0] }
                ]

            });

            function deleteLocation(siteId) {
                var action = '@Url.Action("Delete", "AdminLocation")';
                var jsonData = JSON.stringify({ "locationId": siteId });

                $.ajax({
                    url: action,
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json charset=utf-8",
                    data: jsonData,
                    processData: false,
                    success: function(data) {
                        if (data.success) {
                            var returnUrl = getParameterByName('ReturnUrl');
                            if ((returnUrl) && (returnUrl.length > 0))
                                location.href = returnUrl;
                            else
                                location.reload();
                        } else {
                            displayErrors(form, data.Errors);
                        }
                    },
                    error: function(jqXhr, textStatus, errorThrown) {
                        alert("Error '" + jqXhr.status + "' (textStatus: '" + textStatus + "', errorThrown: '" + errorThrown + "')");
                    },
                    complete: function() {
                    }
                });
            }

    function displayErrors(form, errors) {
        var container = form.find("[data-valmsg-summary=true]"),
            list = container.find("ul");

        if (list && errors.length) {
            container.addClass("validation-summary-errors")
                .removeClass("validation-summary-valid");

            list.empty();
            $.each(errors, function (index, value) {
                list.append('<li>' + value + '</li>');
            });

            if (window.onValidatorSummaryShown) {
                window.onValidatorSummaryShown.call(container);
            }
        }
    }

    function viewSite(tag) {
        window.top.location = '/' + tag;
    }


    </script>
}
